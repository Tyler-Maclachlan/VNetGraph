!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(3))},function(t,e,n){"use strict";var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=o(n(2)),s=o(n(4)),r=n(5),a=n(6),c=n(7),u=o(n(8)),h=function(){function t(t,e,n,o){var r=this;this.numLoops=0,this.mousePos={x:0,y:0},this.container=t;var c=e.length,h=n.length;this.graphEdges=new Map,this.graphNodes=new Map,this.graphAttractions=new Map;for(var d=0;d<c;d++){var l={x:Math.random()*t.clientWidth,y:Math.random()*t.clientHeight};this.graphNodes.set(e[d].id,new i.default(1,l))}for(d=0;d<h;d++)this.graphEdges.set(d,new s.default(this.graphNodes.get(n[d].source),this.graphNodes.get(n[d].target),150,20));for(d=0;d<c;d++)for(var f=d+1;f<c;f++)this.graphAttractions.set(d+"-"+f,new u.default(this.graphNodes.get(e[d].id),this.graphNodes.get(e[f].id)));console.log(this.graphAttractions.size),this.canvas=a.createCanvas(t),this.canvas.onmousemove=function(t){r.updateMousePos(t)},requestAnimationFrame(function(){r.mainLoop()})}return t.prototype.mainLoop=function(){var t=this;requestAnimationFrame(function(){t.mainLoop()}),console.time("update"),this.graphAttractions.clear(),this.getAttractions(),console.log("attractions",this.graphAttractions.size),r.physicsStep(this.graphNodes,this.graphEdges,this.graphAttractions),console.timeEnd("update"),console.time("render"),a.render(this.canvas.getContext("2d"),this.graphNodes,this.graphEdges),console.timeEnd("render"),this.numLoops++},t.prototype.updateMousePos=function(t){this.mousePos=c.getMousePosition(this.canvas,t)},t.prototype.getAttractions=function(){var t=this;this.graphNodes.forEach(function(e,n){var o=e.position,i=o.x,s=o.y;t.graphNodes.forEach(function(o,r){var a=o.position,c=a.x,h=a.y;c>i-100&&c<i+100&&h>s-100&&h<s+100&&(t.graphAttractions.has(n+"-"+r)||t.graphAttractions.has(r+"-"+n)||t.graphAttractions.set(n+"-"+r,new u.default(e,o)))})})},t}();window.VNetGraph||(window.VNetGraph=h),e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),i=function(){function t(t,e){this.mass=t,this.position=e,this.acceleration={x:0,y:0},this.velocity={x:0,y:0}}return t.prototype.update=function(){this.velocity=o.addVectors(this.velocity,this.acceleration),o.isVecZero(this.velocity)||(this.position=o.addVectors(this.position,this.velocity)),this.velocity=o.multiplyVecByScalar(this.velocity,.7),this.acceleration=o.multiplyVecByScalar(this.acceleration,.3)},t}();e.default=i},function(t,e,n){"use strict";function o(t,e){return e?{x:t.x/e,y:t.y/e}:{x:t.x,y:t.y}}function i(t){return Math.sqrt(t.x*t.x+t.y*t.y)}Object.defineProperty(e,"__esModule",{value:!0}),e.addVectors=function(t,e){return{x:t.x+e.x,y:t.y+e.y}},e.subVectors=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},e.multiplyVecByScalar=function(t,e){return{x:t.x*e,y:t.y*e}},e.divideVecByScalar=o,e.getVecLength=i,e.normalizeVec=function(t){return o(t,i(t))},e.getDistanceBetweenVectors=function(t,e){var n=t.x-e.x,o=t.y-e.y;return Math.sqrt(n*n+o*o)},e.dotVectors=function(t,e){return t.x*e.y+t.y*e.y},e.isVecZero=function(t){return i(t)<1e-4},e.getAngleBetweenVectors=function(t,e){return 180*Math.atan2(e.y-t.y,e.x-t.x)/Math.PI},e.radsToDegrees=function(t){return 180*t/Math.PI}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),i=function(){function t(t,e,n,o){this.node1=t,this.node2=e,this.restDistance=n,this.stiffness=o}return t.prototype.update=function(){var t=o.getDistanceBetweenVectors(this.node1.position,this.node2.position);t=t||1;var e=o.normalizeVec(o.subVectors(this.node2.position,this.node1.position)),n=o.normalizeVec(o.subVectors(this.node1.position,this.node2.position)),i=o.subVectors(this.node1.velocity,this.node2.velocity),s=o.subVectors(this.node2.velocity,this.node1.velocity),r=this.stiffness*(t-this.restDistance)*(e.x/t)-.03*i.x,a=this.stiffness*(t-this.restDistance)*(e.y/t)-.03*i.y,c=this.stiffness*(t-this.restDistance)*(n.x/t)-.03*s.x,u=this.stiffness*(t-this.restDistance)*(n.y/t)-.03*s.y;this.node1.acceleration.x+=r/this.node1.mass,this.node1.acceleration.y+=a/this.node1.mass,this.node2.acceleration.x+=c/this.node2.mass,this.node2.acceleration.y+=u/this.node2.mass},t}();e.default=i},function(t,e,n){"use strict";function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),e.physicsStep=function(t,e,n){console.time("attr"),n.forEach(function(t){t.update()}),console.timeEnd("attr"),console.time("springs"),e.forEach(function(t){t.update()}),console.timeEnd("springs"),console.time("nodes"),t.forEach(function(t){t.update()}),console.timeEnd("nodes")},o(n(8)),o(n(2)),o(n(4))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createCanvas=function(t){var e=document.createElement("canvas"),n=t.clientWidth,o=t.clientHeight;return e.width=n,e.height=o,t.appendChild(e),e},e.render=function(t,e,n){t.clearRect(0,0,t.canvas.width,t.canvas.height),n.forEach(function(e,n){!function(t,e){t.beginPath(),t.lineWidth=2,t.strokeStyle="blue",t.moveTo(e.node1.position.x,e.node1.position.y),t.lineTo(e.node2.position.x,e.node2.position.y),t.stroke()}(t,e)}),e.forEach(function(e){!function(t,e,n){void 0===n&&(n=20),t.beginPath(),t.arc(e.position.x,e.position.y,n,0,2*Math.PI,!1),t.fillStyle="#252525",t.fill(),t.lineWidth=5,t.strokeStyle="#252525",t.stroke()}(t,e,20)})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getMousePosition=function(t,e){return{x:e.pageX-t.offsetLeft,y:e.pageY-t.offsetTop}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0);e.GRAVITY=6.67428*Math.pow(10,-11);var i=function(){function t(t,n,o){void 0===o&&(o=e.GRAVITY),this.node1=t,this.node2=n,this.gravity=o}return t.prototype.update=function(){var t=o.getDistanceBetweenVectors(this.node1.position,this.node2.position)||1,e=this.gravity*(this.node1.mass*this.node2.mass/(t*t)),n=o.getAngleBetweenVectors(this.node1.position,this.node2.position),i=o.normalizeVec({x:-e*Math.cos(n),y:-e*Math.sin(n)}),s=o.normalizeVec({x:e*Math.cos(n),y:e*Math.sin(n)});this.node1.acceleration.x+=i.x/this.node1.mass,this.node1.acceleration.y+=i.y/this.node1.mass,this.node2.acceleration.x+=s.x/this.node2.mass,this.node2.acceleration.y+=s.x/this.node2.mass},t}();e.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,